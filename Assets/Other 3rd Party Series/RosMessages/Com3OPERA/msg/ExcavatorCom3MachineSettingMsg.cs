//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Com3
{
    [Serializable]
    public class ExcavatorCom3MachineSettingMsg : Message
    {
        public const string k_RosMessageName = "com3_msgs/ExcavatorCom3MachineSetting";
        public override string RosMessageName => k_RosMessageName;

        //  engine rpm
        //  valid number is from 900 to 2500.
        public double engine_rpm;
        //  bool hydraulic_off # false = on, true = on
        //  bool hydraulic_off # false = on, true = off
        //  power mode
        //  false:power_mode, true:eco_mode
        public bool power_eco_mode;
        //  travel mode of track speed 
        //  false:rabbit_mode, true:turtle_mode
        public bool travel_speed_mode;
        //  working_mode_notice for only setting Green and Blue LEDs lighting condition
        //  false:teleoperation mode, true:automation mode
        public bool working_mode_notice;
        //  yellow led setting
        //  0:Off, 1:Blinking, 2:On
        public byte yellow_led_mode;
        //  control mode of front joints.
        //  0:Off, 1:effort, 2:velocity
        public byte front_control_mode;
        //  control mode of tracks.
        //  0:Off, 1:effort(lever input), 2:Velocity of each tracks, 3:Velociy of center between tracks.
        public byte tracks_control_mode;

        public ExcavatorCom3MachineSettingMsg()
        {
            this.engine_rpm = 0.0;
            this.power_eco_mode = false;
            this.travel_speed_mode = false;
            this.working_mode_notice = false;
            this.yellow_led_mode = 0;
            this.front_control_mode = 0;
            this.tracks_control_mode = 0;
        }

        public ExcavatorCom3MachineSettingMsg(double engine_rpm, bool power_eco_mode, bool travel_speed_mode, bool working_mode_notice, byte yellow_led_mode, byte front_control_mode, byte tracks_control_mode)
        {
            this.engine_rpm = engine_rpm;
            this.power_eco_mode = power_eco_mode;
            this.travel_speed_mode = travel_speed_mode;
            this.working_mode_notice = working_mode_notice;
            this.yellow_led_mode = yellow_led_mode;
            this.front_control_mode = front_control_mode;
            this.tracks_control_mode = tracks_control_mode;
        }

        public static ExcavatorCom3MachineSettingMsg Deserialize(MessageDeserializer deserializer) => new ExcavatorCom3MachineSettingMsg(deserializer);

        private ExcavatorCom3MachineSettingMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.engine_rpm);
            deserializer.Read(out this.power_eco_mode);
            deserializer.Read(out this.travel_speed_mode);
            deserializer.Read(out this.working_mode_notice);
            deserializer.Read(out this.yellow_led_mode);
            deserializer.Read(out this.front_control_mode);
            deserializer.Read(out this.tracks_control_mode);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.engine_rpm);
            serializer.Write(this.power_eco_mode);
            serializer.Write(this.travel_speed_mode);
            serializer.Write(this.working_mode_notice);
            serializer.Write(this.yellow_led_mode);
            serializer.Write(this.front_control_mode);
            serializer.Write(this.tracks_control_mode);
        }

        public override string ToString()
        {
            return "ExcavatorCom3MachineSettingMsg: " +
            "\nengine_rpm: " + engine_rpm.ToString() +
            "\npower_eco_mode: " + power_eco_mode.ToString() +
            "\ntravel_speed_mode: " + travel_speed_mode.ToString() +
            "\nworking_mode_notice: " + working_mode_notice.ToString() +
            "\nyellow_led_mode: " + yellow_led_mode.ToString() +
            "\nfront_control_mode: " + front_control_mode.ToString() +
            "\ntracks_control_mode: " + tracks_control_mode.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
